{"name": "test_reqres_tc_auth_002", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "self = <tests.test_auth.TestAuth object at 0x000001E0AF7EEC80>\nreqres_url = 'https://reqres.in/api/login'\nrequest = <FixtureRequest for <Function test_reqres_tc_auth_002>>\n\n    @pytest.mark.test\n    @pytest.mark.req_res\n    @pytest.mark.valid_auth\n    def test_reqres_tc_auth_002(self, reqres_url, request):\n        test_name = request.node.name\n        logger.info(\"Executing test :  \" + test_name)\n        jsonbody = get_json('req_res_invalid_creds.json')\n        response = send_request(\"POST\", reqres_url, get_headers(\"apikey\"), json=jsonbody)\n>       jsonResponse = response.json()\n\ntests\\test_auth.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\lib\\site-packages\\requests\\models.py:898: in json\n    return complexjson.loads(self.text, **kwargs)\nC:\\Program Files\\Python310\\lib\\json\\__init__.py:346: in loads\n    return _default_decoder.decode(s)\nC:\\Program Files\\Python310\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x000001E0AECCB040>\ns = '<!DOCTYPE html>\\n<html>\\n  <head>\\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n    <met...  <body>\\n    <iframe src=\"https://www.herokucdn.com/error-pages/application-error.html\"></iframe>\\n  </body>\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nC:\\Program Files\\Python310\\lib\\json\\decoder.py:355: JSONDecodeError"}, "attachments": [{"name": "log", "source": "5b5c3eaa-e526-4f66-8fdc-41654d6c13a6-attachment.txt", "type": "text/plain"}], "start": 1754323033009, "stop": 1754323033366, "uuid": "3abbf76c-4cb3-4315-a5c1-f9acf3ef61cd", "historyId": "bee4d3054f3cde0548d7e52bdcda83ab", "testCaseId": "bee4d3054f3cde0548d7e52bdcda83ab", "fullName": "tests.test_auth.TestAuth#test_reqres_tc_auth_002", "labels": [{"name": "tag", "value": "valid_auth"}, {"name": "tag", "value": "req_res"}, {"name": "tag", "value": "test"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_auth"}, {"name": "subSuite", "value": "TestAuth"}, {"name": "host", "value": "DESKTOP-V66RFA9"}, {"name": "thread", "value": "4304-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_auth"}], "titlePath": ["tests", "test_auth.py", "TestAuth"]}